{"version":3,"file":"static/js/58.6663baee.chunk.js","mappings":"gRAEMA,EAAW,+BACXC,EAAMC,mCAECC,EAAa,mCAAG,6GAEFC,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,qCACmBC,IAHjB,cAEnBI,EAFmB,yBAKlBA,EAASC,MALS,gCAOzBC,QAAQC,OAAO,IAAIC,MAAM,cAPA,yDAAH,qDAWbC,EAAgB,mCAAG,WAAMC,GAAN,gGAELP,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,+BACaW,EADb,oBAC8BV,IAHzB,cAEtBI,EAFsB,yBAKrBA,EAASC,MALY,gCAO5BC,QAAQC,OAAO,IAAIC,MAAM,cAPG,yDAAH,sDAWhBG,EAAc,mCAAG,WAAMC,GAAN,gGAEHT,EAAAA,GAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,oBAA6CZ,IAF1C,cAEpBI,EAFoB,yBAGnBA,EAASC,MAHU,gCAK1BC,QAAQC,OAAO,IAAIC,MAAM,cALC,yDAAH,sDASdK,EAAiB,mCAAG,WAAMD,GAAN,gGAENT,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,IAHhB,cAEvBI,EAFuB,yBAKtBA,EAASC,MALa,gCAO7BC,QAAQC,OAAO,IAAIC,MAAM,cAPI,yDAAH,sDAWjBM,EAAc,mCAAG,WAAMF,GAAN,gGAEHT,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,IAHnB,cAEpBI,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BC,QAAQC,OAAO,IAAIC,MAAM,cAPC,yDAAH,qD,qLC7CdO,EAAMC,EAAAA,EAAAA,IAAH,mDAIHC,EAAWD,EAAAA,EAAAA,IAAH,gEAKRE,EAAWF,EAAAA,EAAAA,IAAH,oEAKRG,EAAUH,EAAAA,EAAAA,IAAH,wDAKPI,EAAOJ,EAAAA,EAAAA,GAAH,mEAKJK,EAAOL,EAAAA,EAAAA,EAAH,mD,+CCwEjB,EAxFa,WACX,OAAkCM,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,IAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEQd,EAAAA,EAAAA,IAAeW,GAFvB,OAERI,EAFQ,OAGdL,EAAaK,EAAQC,MAHP,gDAKd,IAAItB,MALU,yDAAH,qDASfoB,GACD,GAAE,CAACH,IAECF,EAAL,CAIA,IAAMQ,EAAU,SAAAC,GACd,OAAqB,OAAjBA,EACI,GAAN,OAAUC,GAEN,mCAAN,OAA0CD,EAC3C,EAqCD,OACE,SAACjB,EAAD,UACGQ,EAAUW,OAAS,GAClB,SAAC,KAAD,kBAtCW,CACfC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,aAAc,EACdC,WAAY,CACV,CACEC,WAAY,KACZC,SAAU,CACRL,aAAc,EACdC,eAAgB,EAChBH,UAAU,EACVD,MAAM,IAGV,CACEO,WAAY,IACZC,SAAU,CACRL,aAAc,EACdC,eAAgB,EAChBC,aAAc,IAGlB,CACEE,WAAY,IACZC,SAAU,CACRL,aAAc,EACdC,eAAgB,OASlB,aACGhB,EAAUqB,KAAI,gBAAGhC,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,aAAca,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACb,UAAC7B,EAAD,YACE,SAACE,EAAD,CAAS4B,IAAG,UAAKhB,EAAQC,IAAiBgB,IAAI,UAC9C,UAAC9B,EAAD,YACE,SAACE,EAAD,UAAOyB,KACP,uBAAIC,SAJOlC,EADF,QAWjB,SAACS,EAAD,mDA3DL,CA+DF,C","sources":["api.js","pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = process.env.REACT_APP_API_KEY;\n\nexport const fetchDayMovie = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/all/day?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?query=${query}&api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieById = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const Box = styled.div`\n  margin: 30px 30px 40px;\n`;\n\nexport const CastItem = styled.div`\n  overflow: hidden;\n  margin: 0 30px;\n`;\n\nexport const NameImfo = styled.div`\n  margin-top: 20px;\n  text-align: center;\n`;\n\nexport const CastImg = styled.img`\n  width: 95%;\n  height: auto;\n`;\n\nexport const Name = styled.h3`\n  font-size: 18px;\n  font-weight: 400px;\n`;\n\nexport const Info = styled.p`\n  margin: 0 40px 0 -30px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../../api';\nimport { Box, CastItem, CastImg, Name, NameImfo, Info } from './Cast.styled';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport defaultImg from '../../default.png';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const reviews = await fetchMovieCast(movieId);\n        setMovieCast(reviews.cast);\n      } catch (error) {\n        new Error();\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  if (!movieCast) {\n    return;\n  }\n\n  const castImg = profile_path => {\n    if (profile_path === null) {\n      return `${defaultImg}`;\n    }\n    return `https://image.tmdb.org/t/p/w500/${profile_path}`;\n  };\n\n  const settings = {\n    dots: true,\n    infinite: false,\n    speed: 500,\n    slidesToShow: 4,\n    slidesToScroll: 4,\n    initialSlide: 0,\n    responsive: [\n      {\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 3,\n          infinite: true,\n          dots: true,\n        },\n      },\n      {\n        breakpoint: 600,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 2,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n    ],\n  };\n\n  return (\n    <Box>\n      {movieCast.length > 0 ? (\n        <Slider {...settings}>\n          {movieCast.map(({ id, profile_path, name, character }) => (\n            <CastItem key={id}>\n              <CastImg src={`${castImg(profile_path)}`} alt=\"name\" />\n              <NameImfo>\n                <Name>{name}</Name>\n                <p>{character}</p>\n              </NameImfo>\n            </CastItem>\n          ))}\n        </Slider>\n      ) : (\n        <Info>We don't have a cast for this movie</Info>\n      )}\n    </Box>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n"],"names":["BASE_URL","KEY","process","fetchDayMovie","axios","response","data","Promise","reject","Error","fetchMovieByName","query","fetchMovieById","id","fetchMovieReviews","fetchMovieCast","Box","styled","CastItem","NameImfo","CastImg","Name","Info","useState","movieCast","setMovieCast","movieId","useParams","useEffect","fetchData","reviews","cast","castImg","profile_path","defaultImg","length","dots","infinite","speed","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","settings","map","name","character","src","alt"],"sourceRoot":""}