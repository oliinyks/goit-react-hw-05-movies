{"version":3,"file":"static/js/499.b60bf846.chunk.js","mappings":"iRAEMA,EAAW,+BACXC,EAAMC,mCAECC,EAAa,mCAAG,6GAEFC,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,qCACmBC,IAHjB,cAEnBI,EAFmB,yBAKlBA,EAASC,MALS,gCAOzBC,QAAQC,OAAO,IAAIC,MAAM,cAPA,yDAAH,qDAWbC,EAAgB,mCAAG,WAAMC,GAAN,gGAELP,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,+BACaW,EADb,oBAC8BV,IAHzB,cAEtBI,EAFsB,yBAKrBA,EAASC,MALY,gCAO5BC,QAAQC,OAAO,IAAIC,MAAM,cAPG,yDAAH,sDAWhBG,EAAc,mCAAG,WAAMC,GAAN,gGAEHT,EAAAA,GAAAA,IAAA,UAAaJ,EAAb,kBAA+Ba,EAA/B,oBAA6CZ,IAF1C,cAEpBI,EAFoB,yBAGnBA,EAASC,MAHU,gCAK1BC,QAAQC,OAAO,IAAIC,MAAM,cALC,yDAAH,sDASdK,EAAiB,mCAAG,WAAMD,GAAN,gGAENT,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,IAHhB,cAEvBI,EAFuB,yBAKtBA,EAASC,MALa,gCAO7BC,QAAQC,OAAO,IAAIC,MAAM,cAPI,yDAAH,sDAWjBM,EAAc,mCAAG,WAAMF,GAAN,gGAEHT,EAAAA,GAAAA,IAAA,UAClBJ,EADkB,kBACAa,EADA,4BACsBZ,IAHnB,cAEpBI,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BC,QAAQC,OAAO,IAAIC,MAAM,cAPC,yDAAH,qD,2KC7CdO,EAAcC,EAAAA,EAAAA,GAAH,gDAIXC,EAAcD,EAAAA,EAAAA,GAAH,+DAMXE,EAASF,EAAAA,EAAAA,GAAH,4FAKNG,EAAgBH,EAAAA,EAAAA,EAAH,gDAGbI,EAAOJ,EAAAA,EAAAA,EAAH,+CAIJK,EAAOL,EAAAA,EAAAA,EAAH,gD,SC6BjB,EAxCgB,WACd,OAAwCM,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEQf,EAAAA,EAAAA,IAAkBY,GAF1B,OAERI,EAFQ,OAGdL,EAAgBK,EAAQC,SAHV,gDAKd,IAAItB,MALU,yDAAH,qDASfoB,GACD,GAAE,CAACH,KAGF,8BACGF,EAAaQ,OAAS,GACrB,SAAChB,EAAD,UACGQ,EAAaS,KAAI,gBAAGpB,EAAH,EAAGA,GAAIqB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAxB,OAChB,UAAClB,EAAD,YACE,SAACC,EAAD,UAASe,KACT,SAACd,EAAD,UAAgBe,KAChB,SAACd,EAAD,UAAO,IAAIgB,KAAKD,GAAYE,yBAHZzB,EADF,OASpB,SAACS,EAAD,6DAIP,C","sources":["api.js","pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = process.env.REACT_APP_API_KEY;\n\nexport const fetchDayMovie = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/all/day?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieByName = async query => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?query=${query}&api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieById = async id => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${id}?api_key=${KEY}`);\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${KEY}`\n    );\n    return response.data;\n  } catch {\n    Promise.reject(new Error('Not Found'));\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  margin: 30px 0 60px;\n`;\n\nexport const ReviewsItem = styled.li`\n  & + & {\n    margin-top: 30px;\n  }\n`;\n\nexport const Author = styled.h3`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: normal;\n`;\nexport const ReviewContent = styled.p`\n  margin-bottom: 10px;\n`;\nexport const Time = styled.p`\n  font-style: italic;\n`;\n\nexport const Info = styled.p`\n  margin-bottom: 40px;\n`;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchMovieReviews } from '../../api';\nimport { useParams } from 'react-router-dom';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  Author,\n  Time,\n  ReviewContent,\n  Info,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const reviews = await fetchMovieReviews(movieId);\n        setMovieReviews(reviews.results);\n      } catch (error) {\n        new Error();\n      }\n    };\n\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      {movieReviews.length > 0 ? (\n        <ReviewsList>\n          {movieReviews.map(({ id, author, content, created_at }) => (\n            <ReviewsItem key={id}>\n              <Author>{author}</Author>\n              <ReviewContent>{content}</ReviewContent>\n              <Time>{new Date(created_at).toLocaleDateString()}</Time>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <Info>We donâ€™t have any reviews for this movie</Info>\n      )}\n    </>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Reviews;\n"],"names":["BASE_URL","KEY","process","fetchDayMovie","axios","response","data","Promise","reject","Error","fetchMovieByName","query","fetchMovieById","id","fetchMovieReviews","fetchMovieCast","ReviewsList","styled","ReviewsItem","Author","ReviewContent","Time","Info","useState","movieReviews","setMovieReviews","movieId","useParams","useEffect","fetchData","reviews","results","length","map","author","content","created_at","Date","toLocaleDateString"],"sourceRoot":""}